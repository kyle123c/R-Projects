---
title: "R Notebook"
output: html_notebook
---
R install

R can be downloaded from the following location:
https://cloud.r-project.org/

Studio can be downloaded from the following:
https://www.rstudio.com/products/rstudio/download/#download
Note: You must install R first before installing/using RStudio.

------------------------------------------------

R vs Python

Case still matters

Indentation is used more for legibility

Changes in syntax
-----------------------------------------------

Printing in R

You can just put something in double quotes to print, but there is a print function available – and it is the same syntax as Python!
Ex. Let's print "Hello world!"
Note: Numbers can be printed without quotes, as well as the results of simple operations, and just variables.

---------------------------------------------------

# - is used for single line comments

Nothing for multiline comments 
----------------------------------------------------

Variables in R

No need for declarations, just like Python.

Main difference is the assignment operator.

Example:
x <- "R is the best!"
y <- 77

The "class" function can be used to check on the type of a variable
class(x)

```{r}
"Hello World"
print('Hello World')

#if these both run? yes

print(5+5)
#if these both run? yes

x <- "R is the best!"
y<-77
# note: <- is pretty much " = " from python
print(y)
print(x)

class(x)
class(y)
```


```{r}
x <- "R is the best!"
y<-77

print(y)
print(x)

class(x)
class(y)


```

Numeric = 7.5,77,845

Integer = 7L,65L,154L – the 'L' makes it an integer

Complex = 11+8i – the 'i' is for the imaginary 

Character = Strings

Logical = TRUE or FALSE

------------------------------------------------
Type conversion (Casting)

When you want to convert one datatype you use the 'as' function appended with 
the type you would like to convert to.

Example:
x <- "R is the best!"
y <- 77
w <-as.character(y)


```{r}
w<-as.character(y)
class(y)
class(w)

print(y)
print(w)
```

Multiline Strings in R/Escape Characters

When creating a multiline string, R will add a "\n" at the end of each line break. If you want to display the line breaks you will need to use the "cat" function.

Example:
my_str <- "R is the best!
Prove me wrong."
print(my_str)
cat(my_str)

The escape character is the same as in Python, the backslash '\'

Example:
my_str2 <- "Programming is very \"Easy\"."
 Try to print out the string above using just the name and then with the "cat" function

```{r}
my_str <- "R is the best!
Prove me wrong."
print(my_str)
cat(my_str) # use cat function to print multi line strings without \n 
```


```{r}

my_str2 <- "Programming is very \"Easy\"." #\ makes a " " in a " "

print(my_str2)
cat(my_str2)
```

String Functions

nchar() – check the number of characters in a string
nchar(my_str)
grepl() – check if a character sequence appears in a string. Returns TRUE or FALSE
grepl("R", my_str)
grepl("Python", my_str)
paste() – concatenate two strings
paste(my_str1,my_str2)
To remove spaces use sep=""
paste(my_str1,my_str2, sep="")

```{r}
nchar(my_str)
nchar(my_str2)
grepl("very" , my_str)   #grepl = checks character sequence;return T||F
paste(my_str, my_str2)   #paste = concatenate two strings

a<- "Apple"
b<- "Orange"
paste(a,b)
#To remove spaces use sep=""•paste(my_str1,my_str2, sep="")
paste(a,b, sep = "")

```

In R the following operators differ:
Modulus - %%
Exponent - ^
Logical AND - &&
Logical OR - ||
Logical NOT - !
-------------------------------------------------
If else statements

In R, indentation is not used for a code block (still good for formatting though). Curly brackets are used {}. It is very important where you put the brackets. Make sure to pay attention to the formatting below. 

Example:
num_1 <- 33
num_2 <- 200
if (num_2 > num_1) {
  print(" num_2 is greater than num_1")
} 
We do not have the "elif" keyword, it is replaced by using "else if"
if (num_2 > num_1) {
  print (" num_2 is greater than num_1")
} else if (num_1 == num_2) {
  print (" num_1 and num_2 are equal")
}
The "else" keyword is the same and functions in the same manner to catch everything that didn't fall into the preceding if/else if statements. 

Just like Python – Nested If's are allowed. 


```{r}
num_1 <- 33
num_2 <- 200
if (num_2 > num_1){
  print(" num_2 is greater than num_1")
}
```
We do not have the "elif" keyword, it is replaced by using "else if"

```{r}
num_1 <- num_2
num_1 <-201
if (num_2 > num_1) {  
  print (" num_2 is greater than num_1")
} else if (num_1 == num_2) {        
  print (" num_1 and num_2 are equal")
} else{
  print (" num_1 is greater than num_2")  
  }
```
Indentation is not required in R

Nested ifs

```{r}
num_1 <- num_2
num_1 <-201
num_2 <-501
if (num_2 > num_1) {  
  print (" num_2 is greater than num_1")
  if (num_2 >500){
    print("BALLIN!")
  }
} else if (num_1 == num_2) {        
  print (" num_1 and num_2 are equal")
} else{
  print (" num_1 is greater than num_2")  
  }
```

WHILE LOOPS 

While loops function the same, but now use brackets just like the if statements.


Breaks function the same as in Python with the same 'break' keyword
'next' is used in R in place of the 'continue' keyword in Python
```{r}
ab <- 1
while(ab < 10){
  print(ab)
  ab <- ab + 1
}
```


For loops
Function the same as in Python, but with the new bracket syntax:

```{r}
for (x in 1:10) {
  print(x)
}


cars <- list("Mustang", "Stingray", "The Boss")
for (x in cars) {
  print(x)
  } 

```

Functions/Methods
Functions are created using the "function" keyword.

Functions are created using the "function" keyword.
my_name <- function(fname = "John", lname = "Doe") {
  paste(fname, lname)
}
my_name("Joey", "Joe Joe Shabadoo") 

Return results with the "return" keyword

my_name <- function(fname = "John", lname = "Doe") {
  return(paste(fname, lname))
}
full_name = my_name("Joey", "Joe Joe Shabadoo")

If you needed, global variables can be set using the following:
tempvar <<- 778
Note the double '<<'


```{r}
my_name <- function(fname = "John", lname = "Doe") {
  paste(fname, lname)
  }
my_name("Joey", "Joe Joe Shabadoo") 

```
Return results with the "return" keyword

```{r}
my_name2 <- function(fname = "John", lname = "Doe") {
  return(paste(fname, lname))
  }
full_name = my_name2("Joey", "Joe Joe Shabadoo")
print(full_name)
```
If you needed, global variables can be set using the following:
tempvar <<- 778
Note the double '<<'

```{r}
my_name <- function(fname = "John", lname = "Doe") {
  temp_var1 <<- 1 # <<- is global!!!
  paste(fname, lname)
  print(temp_var1)
  }
my_name("Joey", "Joe Joe Shabadoo") 
print(temp_var1)
```

To install libraries = just paste it in console

What was a module in Python can be thought of as a library in R.

The code to use a library should be placed at the top and looks like this:
library("reshape2")

If you do not have a particular library, it can be installed with the following command in the console:
install.packages("reshape2")

--------------------------
Dataframes

library(readxl)
Species <- read_excel("~/Downloads/Species.xlsx", 
    sheet = "Sheet2")
View(Species)

```{r}
print(Species)
#View(Species)
#edit(Species)
class(Species) #class is type ;shows its dataframe
```


Dataframes
You can access elements in the DF with the following methods:

Like in Pandas, dataframes are very useful and available in R.
Let's load an excel and csv file in RStudio to demonstrate. "GHCND_sample_csv2.csv" and "Sample100.xls"
You can access elements in the DF with the following methods:
DFvarName[["COLUMNNAME"]][1]
DFvarName$COLUMNNAME[1]


```{r}
GHCND_sample_csv[["PRCP"]][3]
GHCND_sample_csv$PRCP[4]
GHCND_sample_csv$PRCP[5]

```

Loading CSV without the GUI

To load a CSV without the GUI, you can do the following:

fileloc <- "C:\\Users\\lbd38\\Downloads\\GHCND_sample_csv2.csv"
var_csv <- read.csv(fileloc)

library(readr)
GHCND_sample <- read_csv("~/Desktop/GHCND_sample.csv")
View(GHCND_sample)

```{r}
#print(GHCND_sample)
#edit(GHCND_sample)
GHCND_sample[["PRCP"]][3]
GHCND_sample$PRCP[4]
GHCND_sample$PRCP[5]

dim.data.frame(GHCND_sample) # the dimensions of the file!

```
DATA FRAME FUNCTIONS

dim()
  returns the dimensions of the DF

ncol()
  returns the number of columns in the DF 
  
colnames()/names()
  returns a vector that contains all the column names
  
rownames()/row.names()
  returns a vector that contains all the row names
  
head()
  returns the header row and the first 6 rows of data
  
tail()
  returns the header row and the last 6 rows of data
  
```{r}
headernames <- names(GHCND_sample)
headernames2 <- names(Species)
print(headernames)
print(headernames2)
class(headernames2)
headernames[9]

head(GHCND_sample)
tail(GHCND_sample)
```
  
LISTS!
Convert a DF vector to a list

Sometimes you may want to convert a DF vector to a more manageable list. You can do so by doing the following:
listx = list(Sample100$`Company Name`)
listy = list(Sample100$Leave)


```{r}
listx <- list(GHCND_sample$LATITUDE)
listy <- list(GHCND_sample$PRCP)

#print(listx)
#print(listy)

listy[[1]][3]
listy[[1]][4]
listy[[1]][5]
```
Plotting - scatter

col is color

Change the size of the points by including the 'cex = x' 

attribute

Change the point shape with the 'pch = x' attribute:
----------------------------------------------------------
The "plot" function has the same functionality here. 
plot(GHCND_sample_csv2$DATE,GHCND_sample_csv2$TMAX, col = 1, main = "Temps", xlab = "Dates", ylab = "Temps")

points(GHCND_sample_csv2$DATE,GHCND_sample_csv2$TMIN, col = 2)

Change the size of the points by including the 'cex = x' attribute
Change the point shape with the 'pch = x' attribute:


```{r}
plot(GHCND_sample$DATE,GHCND_sample$TMAX, col = 3, main = "Temps", xlab = "Dates", ylab = "Temps", pch = 10)

points(GHCND_sample$DATE,GHCND_sample$TMIN, col = 2, pch = 7) #points connect other colors to graph
```

Plotting - line

```{r}
plot(GHCND_sample$DATE,GHCND_sample$TMAX, type = "l", col = 1, main = "Temps", xlab = "Dates", ylab = "Temps")

lines(GHCND_sample$DATE,GHCND_sample$TMIN, type = "l", col = 2)
```

Bar Plots

barplot(GHCND_sample_csv2$TMAX, names.arg = GHCND_sample_csv2$DATE, col = "red", density = 15, width = c(5,4,3,1))

The "horiz = TRUE" attribute can also be added if you want horizontal bars 

```{r}

#barplot(SampleGCd$TMAX, names.arg = GHCND_sample$DATE, col = "red", density = 15, width = c(5,4,3,1))

#The "horiz = TRUE" attribute can also be added if you want horizontal bars 

barplot(GHCND_sample$TMAX, names.arg = GHCND_sample$DATE, col = "red", density = 15, width = c(5,4,3,1), horiz = TRUE)

```

Pie charts

```{r}

x <- c(10,20,30,40)

mylabel <- c("Fighting Games", "FPS", "MMO", "RPGs")  # TYPICALLY u would pull these values out of a data frame.

colors <- c("blue", "yellow", "purple", "red")

pie(x, label = mylabel, main = "Game Distribution", col = colors)

legend("bottomright", mylabel, fill = colors)

```
Statistics with DataFrames and R

The summary() function provides a very quick way of obtaining statistical information about the dataset in the DF.

Summary returns the following information for each variable:

Min - can also use min() function 

min(GHCND_sample_csv2$TMAX) •Can be verified with the which.min() function, which returns the index position of the min value.•which.min(GHCND_sample_csv2$TMAX)

First quantile – the value that cuts off the first 25% of dataMedian - can also use the median() function

 median(GHCND_sample_csv2$TMAX)

Mean – can also use the mean() function
 mean(GHCND_sample_csv2$TMAX) 

Third quantile – the value that cuts off the first 75% of data•use the quantile() function to get the other quartiles.•quantile(GHCND_sample_csv2$TMIN, c(0.50))

Max – can be verified with the which.max() function , which returns the index position of the max value.•The same functions as MIN apply for MAX.
```{r}

#summary(GHCND_sample)
quantile(GHCND_sample$TMIN)
quantile(GHCND_sample$TMIN, c(0.50))

```

Datasets in R

There is an abundance of datasets available for testing in R

To see available datasets do the following:
data()

To list the data sets in all *available* packages, do the following:
data(package = .packages(all.available = TRUE))

To include datasets from the Modern Applied Statistics with S library:
library(MASS)

```{r}

library(MASS)
data()
```

```{r}
View(mtcars)
View(wtloss)
```

click F1 on the value and it'll give examples
```{r}
summary((wtloss))
```
To view all active objects in the workspace use the ls() function 

To remove an object, use the rm() function.
 
 rm(object_name)

To remove all objects run:

rm(list=ls())

```{r}
# it list all the datasets
ls()
```
```{r}
my_tempDS <- mtcars
ls()
```
```{r}
#rm() removes the dataset
rm(my_tempDS)
ls()
```

Dataset Info
Don't forget about the following functions we mentioned last week:
str()
head()
tail()
class()
dim()

```{r}
head(mtcars)
```


```{r}
str(mtcars) #shows structure
class(mtcars)
```
```{r}
head(mtcars,10)
```
```{r}
dim(mtcars)
```

Keeping certain values from a dataset

Use the subset() function

Example: Extract mpg,wt, and hp from mtcars
  mtcar_sub<- subset(mtcars, select = c(mpg,wt,hp))

Example2: Keeping data based on a certain condition
  mtcar_sub2<-subset(mtcars, mpg > 20)
  titanic_sub1<-subset(Titanic, Sex == "Male")



```{r}
mtcar_sub<- subset(mtcars, select = c(mpg,wt,hp))
#this being able the extract only these values from the data sheet
```

Example2: Keeping data based on a certain condition

```{r}
mtcar_sub2<-subset(mtcars, mpg > 20)

```

```{r}
View(Titanic)
#titanic_sub1 <- subset(Titanic, Sex == "Male") not working....
```

Renaming columns
Install gdata - install.packages("gdata")

Use the remove.vars() function.

Example: How can we change the name of mpg and wt in mtcars_sub to something else?

rename.vars(mtcar_sub, c('mpg','wt'), c('newtext1','newtext2'))


```{r}
library(gdata)
rename.vars(mtcar_sub, c('mpg','wt'), c('mpg_new','wt_new'))

```
Current DateTime

```{r}
Sys.Date()
Sys.time()
date()
```
use strptime() to convert date formats. 
Example: x <- "04/09/2021"
newtime <- strptime(x, "%d/%m/%Y")

```{r}
x <- "04/09/2021"
newtime <- strptime(x, "%d/%m/%Y")
print(newtime)
```
use difftime() to find the difference between two dates/times

```{r}
difftime(newtime, Sys.Date(), units = 'weeks')

```
Sorting Data

Use the order() function :P
Example: sort mtcar_sub2 by mpg, then wt.

```{r}
mtcar_sub2_sorted <- mtcar_sub2[order(mtcar_sub2$mpg, - mtcar_sub2$wt), ] # the - makes descending order

#mtcar_sub2_sorted <- mtcar_sub2[order(mtcar_sub2$mpg, mtcar_sub2$wt), ] Ascending order 
```

Advanced graphs
Hexbin
Used as an alternative scatterplot. Good when there are a lot of overlapping values

```{r}
library(hexbin)
myhexb<-hexbin(iris$Petal.Length, iris$Sepal.Length, xbins=30)
plot(myhexb)
View(iris)
```

Mosaicplot
Used for observing categorical data. The area represents the number of observations:

```{r}
mosaicplot(HairEyeColor, col=terrain.colors(2))
```

Heatmap
Used to compare several categorical values and how they perform relative to many numerical values. 

```{r}
data(mtcars)
htmap <-as.matrix(mtcars)
heatmap(htmap, col=terrain.colors(256))
```
3d Graphs
3D scatterplot
#Install Rcmdr

```{r}
library(Rcmdr)
data(iris)
scatter3d(iris[,1],iris[,2],iris[,3])
```
R commander GUI

Install rpl first
If you need to restart R Commander:
detach("package:Rcmdr", unload = TRUE)
library("Rcmdr")
How can we do the 3D graph we just did through the GUI?
Use Petal.Length as the response variable and Sepal Length and Width as the explanatory variables. 

```{r}
library(Rcmdr)
#detach("package:Rcmdr", unload = TRUE)
```
WORD CLOUDS

```{r}
library(tm)
library(wordcloud)
mlktxt<-"C:\\Users\\Margaret Vieira\\Desktop\\kyleRStuff\\wordcloud"
b<-Corpus(DirSource(mlktxt), readerControl = list(language = "eng"))
b<-tm_map(b, tolower)
b<-tm_map(b, stripWhitespace)
b<- tm_map(b, removePunctuation)
tdm<-TermDocumentMatrix(b)
m1<-as.matrix(tdm)
v1<-sort(rowSums(m1), decreasing=TRUE)
d1<-data.frame(word = names(v1), freq=v1)
wordcloud(d1$word,d1$freq)

#YOU CAN ADD AS MUCH TXT FILES TO COMBINE AS YOU WANT
#THIS WILL BE IN THE ASSIGNMENT
```

```{r}

library(ggplot2)

ggplot(GHCND_sample_csv) +
 aes(x = DATE, y = TMAX) +
 geom_line(size = 1L, colour = "#0c4c8a") +
 labs(title = "TEMP OVER TIME") +
 theme_minimal()

```

First – A follow up on Wordcloud
Filtering 
#this is on mac!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
```{r}

library(tm)
library(wordcloud)
mlktxt<-"/Users/kyle/R FOLDER/R Projects/wordcloud"
b<-Corpus(DirSource(mlktxt), readerControl = list(language = "eng"))
b<-tm_map(b, tolower)
b<-tm_map(b, stripWhitespace)
b<- tm_map(b, removeWords, stopwords("english")) # this take out the common words
b<- tm_map(b, removeWords, c("just", "way"))
b<- tm_map(b, removePunctuation)
tdm<-TermDocumentMatrix(b)
m1<-as.matrix(tdm)
v1<-sort(rowSums(m1), decreasing=TRUE)
d1<-data.frame(word = names(v1), freq=v1)
wordcloud(d1$word,d1$freq, min.freq = 5, max.words = 25, col=rainbow(4))

```

how to find path on mac
```{r}
getwd()
```

```{r}
stopwords("english")
```

Radiant
Web based GUI
To install:
install.packages("radiant", repos = "https://radiant-rstats.github.io/minicran/", type = 'binary')
To run click on "Addins" and "Start radiant"
How can we do some of the things we have seen in Radiant?
Note: You must stop Radiant before you are able to run more code in RStudio.
-----------------------------------------------------------------------------

Esquisse

Another great GUI for building graphs
Uses "shiny" package as well.
To install:
install.packages("esquisse")

How can we build graphs with the Esquisse GUI?

-------------------------------------------------------------------
First – A follow up on Wordcloud

Filtering

```{r}
wordcloud(d1$word,d1$freq, min.freq = 5, max.words = 11, col=rainbow(8))
```

Removing words:

stopwords is a list of common words to remove. You can also provide your own. Try it out.

```{r}
b<- tm_map(b, removeWords, stopwords("english"))

```

Rattle

Stands for "R Analytical Tool To Learn Easily"
Like R Commander, but more advanced
Good for data mining
Accepts a variety of data inputs, Weka included
------------------------------------------------------------------------------------------

Installing/Running Rattle

Run the following in the console:
install.packages("rattle", dependencies=c("Depends", "Suggests"))

Grab a cup of coffee :P (Install takes about 5-10 mins, lots of packages to install)

Once installed run the following code to start the GUI:
library(rattle) 
rattle()
Note: you may need to install GTK+ and Restart R after it is installed.


```{r}

ytemp <-4 #same shit

5 -> ytemp #same shit


print(ytemp) #same shit
ytemp        #same shit

# know the type in R
print(class(ytemp))

as.character(ytemp)
```
```{python}

y = str('2')
print(y)
```

